apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

# [EDIT] Specify the Kubernetes namespace into which ZenHub will be deployed.
namespace: <a_dedicated_namespace>

# [NOTE] You cannot set a `name_suffix` because the URLs would not match
# existing resources.

resources:
  - base
  - options/sanitycheck
  # - options/ingress # Example of an Nginx Ingress

  # Optional configurations
patchesStrategicMerge:
# - options/zenhub-registry/zenhub-registry.yaml #! Adds imagePullSecrets to pull images from ZenHub's registry
# - options/scaling/deployments-scaling.yaml #! Change number of replicas and scaling
# - options/scaling/deployments-resources-small.yaml #! Enable to use minimum required resources, or customize them yourself
# - options/pgbouncer/pgbouncer-config.yaml #! Enable if custom configuration is required for pgbouncer (connection and pool limits, etc).
                                            #! See documentation in options/pgbouncer/README.md to make configuration changes.

# [EDIT] (Optional) specify any labels you want applied to the deployments.
commonLabels:
  app.kubernetes.io/part-of: zenhub-enterprise
  app.kubernetes.io/application: zenhub
  app.kubernetes.io/instance: zhe-for-k8s
  app.kubernetes.io/managed-by: kustomize

commonAnnotations:
  app.kubernetes.io/version: 3.4.0

# [EDIT] If your cluster does not have access to our public Docker registry,
# update the `newName` values with paths to your own private Docker registry.
images:
  - name: kraken-webapp
    newName: us.gcr.io/zenhub-public/kraken-webapp
    newTag: zhe-3.4.0
  - name: kraken-extension
    newName: us.gcr.io/zenhub-public/kraken-extension
    newTag: zhe-3.4.0
  - name: kraken-zhe-admin
    newName: us.gcr.io/zenhub-public/kraken-zhe-admin
    newTag: zhe-3.4.0
  - name: raptor-backend
    newName: us.gcr.io/zenhub-public/raptor-backend
    newTag: zhe-3.4.0
  - name: toad-backend
    newName: us.gcr.io/zenhub-public/toad-backend
    newTag: zhe-3.4.0
  - name: sanitycheck
    newName: us.gcr.io/zenhub-public/sanitycheck
    newTag: zhe-3.4.0
  - name: busybox
    newName: docker.io/library/busybox
    newTag: latest
  - name: nginx
    newName: docker.io/library/nginx
    newTag: latest

configMapGenerator:
  - name: configuration
    behavior: merge
    literals:
      # [EDIT] Set your top-level domain where ZenHub will be served from. This
      # is used to tell the ZenHub webapp how to reach the ZenHub APIs.
      - domain_tld=yourcompany.dev
      # [EDIT] Set the subdomain that ZenHub will be served from, or leave as
      # default "zenhub" value.
      - subdomain_suffix=zenhub
      # [EDIT] Set the subdomain that ZenHub Admin-UI will be served from, or leave as
      # default "admin-zenhub" value.
      - admin_ui_subdomain=admin-zenhub
      #
      # NOTE: Make sure the value does not have a trailing slash.
      - github_hostname=https://<github_enterprise_host>
      # [EDIT] Specify the OAuth App Client ID for the ZenHub application. See here
      # for instructions on how to setup an OAuth app on your GitHub server:
      # https://docs.github.com/en/developers/apps/creating-an-oauth-app
      # The secret value should be passed to `github_app_secret` below (in the
      # "secretGenerator" section). Section 2.2 of the README in this folder explains
      # how to configure the fields of the OAuth App.
      - github_app_id=<github_oauth_app_client_id> # GitHub OAuth App Client ID
      #
      # S3 API compatible object storage buckets for uploaded files and images
      - bucket_access_key_id=<access_key_id>
      - bucket_region=<bucket_region> # e.g., us-east-1
      - bucket_domain=<bucket_public_domain> # e.g., s3.us-east-1.amazonaws.com
      - files_bucket_name=<bucket_name>
      - images_bucket_name=<bucket_name>
      #
      # If you are using AWS DocumentDB for your MongoDB, enable this
      # - mongo_is_documentdb=true
      #
      # [EDIT] Link to your Chome Extension download page. Obtained by configuring your Chrome Extension through the ZenHub Admin User Interface
      - chrome_extension_webstore_url="" # e.g. https://chrome.google.com/webstore/detail/your-extension-name/id
      #
      # [EDIT] Firefox extension UUID used to publish Firefox extensions.
      # NOTE: Always use the same UUID to allow for automatic extension updates for your users
      #       You can find the UUID at the bottom of your extension's product page https://addons.mozilla.org/developers/
      - manifest_firefox_id=zenhub-enterprise@<your_company_domain>

secretGenerator:
  - name: configuration
    behavior: merge
    literals:
      # [EDIT] Fill in postgres_username and postgres_password for PGBouncer connection pooler
      - postgres_url=postgresql://<postgres_username>:<postgres_password>@pgbouncer:5432/raptor_production?sslmode=disable
      # [EDIT] The full standard credentials URI for PostgreSQL to be provided to pgbouncer to make connections to PostgreSQL
      - pgbouncer_url=postgresql://<postgres_username>:<postgres_password>@<postgres_hostname>:<postgres_port>/raptor_production
      # [EDIT] The full standard full credentials URI for MongoDB
      - mongo_url=mongodb://<mongo_username>:<mongo_password>@<mongo_hostname>:<mongo_port>/zenhub
      # [EDIT] The full standard full credentials URI for Redis
      - redis_url=redis://<redis_username>:<redis_password>@<redis_hostname>:<redis_port>/0
      # [EDIT] The full standard full credentials URI for Redis
      - cable_redis_url=redis://<redis_username>:<redis_password>@<redis_hostname>:<redis_port>/1
      # [EDIT] The standard full credentials URI for RabbitMQ. Remove the 's' from amqps if not using TLS on RabbitMQ. Refer to https://www.rabbitmq.com/uri-spec.html for the proper syntax if using Virtual Hosts (vhosts).
      - rabbitmq_url=amqps://<rabbitmq_username>:<rabbitmq_password>@<rabbitmq_hostname>:<rabbitmq_port>
      # [EDIT] The secret for the GitHub OAuth app. See github_app_id above.
      - github_app_secret=<github_oauth_app_secret>
      # [EDIT] Bucket secret access key
      - bucket_secret_access_key=<some-key>
      # [EDIT] License Token
      - enterprise_license_token=<zhe-license-jwt>
      # [EDIT] Admin-UI password
      - admin_ui_pass=<some_pass>
  # [EDIT] Certificate for Postgres DB SSL/TLS.
  - name: postgres-ca-bundle
    behavior: replace
    files:
      - <some_path>/postgres-ca.pem
  # [EDIT] Certificates for MongoDB SSL/TLS.
  # [NOTE] If you use this you must add "?tls=true&tlsCAFile=/var/ca-bundle/mongo/<some_pem>" to the end of mongo_url
  # - name: mongo-ca-bundle
  #   behavior: replace
  #   files:
  #     - <some_path>/<some_pem>

  # [EDIT] If you need admin access to pgbouncer to view pools, connections, etc. and the username that you use to connect to postgres is not named "postgres".
  # [IMPORTANT NOTE] See documentation in options/pgbouncer/README.md to make configuration changes.
  # - name: pgbouncer-userlist
  #   files:
  #     - options/pgbouncer/userlist.txt
  #   options:
  #     disableNameSuffixHash: true
  # - name: pgbouncer-ini
  #   files:
  #     - options/pgbouncer/pgbouncer.ini
  #   options:
  #     disableNameSuffixHash: true

  - name: internal
    # internal values are generated at random for new customer and taken from existing ZHE2 installation for migrating customer
    behavior: merge
    literals:
      # NOTE:
      # => If you migrating from ZenHub Enterprise version 2, please recover
      # the values from your existing installation (see our ZHE2 to ZHE3 upgrade
      # instructions https://github.com/ZenHubHQ/zenhub-enterprise/tree/master/k8s-cluster/zhe3-migration,
      # you can get these values from variables.txt from zhe3-migration-cluster.sh)
      # => If you are setting up a new ZenHub Enterprise, respect the regexp format
      # on Linux, you can run the following to generate the secret as follows:
      # for most secrets
      # tr -dc '[:alnum:]' </dev/urandom | head -c ${1-38} ; echo ''
      # for the ones requiring a hex format
      # tr -dc '[:xdigit:]' </dev/urandom | head -c ${1-64} | awk '{print tolower($0)}'
      # on MacOS, add LC_CTYPE=C to the beginning of the tr command
      # [EDIT]
      - toad_redis_password=<[:alnum:]{24}>
      # [EDIT]
      - raptor_redis_password=<[:alnum:]{24}>
      # [EDIT]
      - internal_auth_token=<[:alnum:]{38}>
      # [EDIT]
      - raptor_admin_password=<[:alnum:]{38}>
      # [EDIT]
      - crypto_pass=<[:alnum:]{38}>
      # [EDIT]
      - lockbox_master_key=<[:xdigit:]{64}>
      # [EDIT] A random string used to seed the encryption of sensitive data in
      # the Raptor database.
      - secret_key_base=<[:alnum:]{38}>
      # [EDIT] Private key used to encrypt GitHub token retrieved and cached in
      # the database.
      - github_token_value_key=<[:xdigit:]{64}>
      # [EDIT] Secret for authenticating GitHub webhooks from Toad. This is set in your
      # GitHub Enterprise instance. If migrating from ZHE2, use your existing value! Check variables.txt:
      # https://github.com/ZenHubHQ/zenhub-enterprise/tree/master/k8s-cluster/zhe3-migration#gather-the-data-from-your-existing-zhe2-source-instance
      - ghwebhook_secret=<[:alnum:]{38}>
      # [EDIT] Encrypt repository ID. Part of the GitHub webhook callback URL.
      # If migrating from ZHE2, use your existing value! Check variables.txt:
      # https://github.com/ZenHubHQ/zenhub-enterprise/tree/master/k8s-cluster/zhe3-migration#gather-the-data-from-your-existing-zhe2-source-instance
      - ghwebhook_pass=<[:alnum:]{38}>
      # [EDIT] Should be the same value as `ghwebhook_secret` above. This
      # one is used by the Raptor services.
      - github_webhooks_secret=<[:alnum:]{38}>
